{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["styles","MAPBOX_TOKEN","App","useState","cityInputValue","setCityInputValue","cityDropdownItems","setCityDropdownItems","headlineText","setHeadlineText","secondaryText","setSecondaryText","map","setMap","cityInputRef","useRef","useEffect","mapboxgl","container","center","zoom","style","on","state","getZoom","getCenter","bearing","getBearing","window","parent","postMessage","JSON","stringify","current","searchRef","addEventListener","e","onCityInputChange","target","value","data","parse","setStyle","a","length","axios","get","params","access_token","autocomplete","response","cities","features","el","key","id","place_name","text","className","Dropdown","ref","placeholder","fluid","search","selection","options","onChange","selectedCityObject","find","flyTo","Input","maxScale","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.39f2b11c.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport * as mapboxgl from 'mapbox-gl';\nimport AutoScale from 'react-auto-scale';\nimport axios from 'axios';\nimport { Dropdown, Input } from 'semantic-ui-react'\n\nimport 'semantic-ui-css/semantic.min.css'\nimport './App.scss';\n\nconst styles = {\n  'blue': 'mapbox://styles/kubatyi/ckdn1lgk80nbp1il7tbjdqnxm',\n  'red': 'mapbox://styles/kubatyi/ckdo7qi431s7n1io4ya13jmvq',\n  'green': 'mapbox://styles/kubatyi/ckdogvd6721wt1ioii4wlls2a',\n  'simple': 'mapbox://styles/kubatyi/ckdoglnu937ix1it80v32fsno'\n};\n\nconst MAPBOX_TOKEN = 'pk.eyJ1Ijoia3ViYXR5aSIsImEiOiJjazA2cmtleDEwMTc5M2NwZ3N3Z2plcGdnIn0.Nio3ZaFI2366HS56tW28wQ';\n\nconst App = () => {\n  const [style, setStyle] = useState(styles['red']);\n  const [cityInputValue, setCityInputValue] = useState('New York');\n  const [cityDropdownItems, setCityDropdownItems] = useState([]);\n  const [headlineText, setHeadlineText] = useState('New York');\n  const [secondaryText, setSecondaryText] = useState('United States');\n  const [map, setMap] = useState(null);\n\n  const cityInputRef = useRef();\n\n  useEffect(() => {\n    mapboxgl.accessToken = MAPBOX_TOKEN;\n\n    setMap(new mapboxgl.Map({\n      container: 'map',\n      center: [-73.9808, 40.7648],\n      zoom: 11,\n      style: styles['red']\n    }));\n\n  }, []);\n\n  useEffect(() => {\n    if (map) {\n      const handleStateChange = () => {\n        const state = {\n          zoom: map.getZoom(),\n          center: map.getCenter(),\n          bearing: map.getBearing()\n        };\n\n        window.parent.postMessage(JSON.stringify(state), '*');\n      };\n\n      map.on('touchend', handleStateChange);\n\n      if (cityInputRef.current) {\n        cityInputRef.current.searchRef.current.addEventListener('keyup', (e) => {\n          onCityInputChange(e.target.value)\n        })\n      }\n\n      window.addEventListener('message', (e) => {\n        const data = JSON.parse(e.data);\n\n        if (data.style) {\n          if (map) {\n            map.setStyle(styles[data.style])\n          }\n        }\n      });\n    }\n  }, [map]);\n\n  const onCityInputChange = async value => {\n    setCityInputValue(value);\n\n    if (value.length) {\n      const response = await axios.get(`https://api.mapbox.com/geocoding/v5/mapbox.places/${value}.json`, {\n        params: {\n          access_token: MAPBOX_TOKEN,\n          autocomplete: true,\n        }\n      });\n\n      const cities = response.data.features.map(el => {\n        return {\n          key: el.id,\n          value: el.place_name,\n          text: el.place_name,\n          center: el.center\n        }\n      });\n\n      setCityDropdownItems(cities);\n    }\n  };\n\n  return (\n    <div id=\"map-editor\">\n      <div className=\"inputs-wrapper\">\n        <Dropdown\n          className=\"city-dropdown\"\n          ref={cityInputRef}\n          placeholder='Select City'\n          fluid\n          search\n          selection\n          value={cityInputValue}\n          options={cityDropdownItems}\n          onChange={(e, data) => {\n            const selectedCityObject = cityDropdownItems.find(el => el.value === data.value);\n            map.flyTo({\n              center: selectedCityObject.center,\n              zoom: 12\n            });\n            setCityInputValue(data.value);\n          }}\n        />\n        <Input fluid placeholder=\"Headline text\" value={headlineText} onChange={e => setHeadlineText(e.target.value)} />\n        <Input fluid placeholder=\"Secondary text\" value={secondaryText} onChange={e => setSecondaryText(e.target.value)} />\n      </div>\n\n      <div className=\"editor-wrapper\">\n        <AutoScale maxScale={1}>\n          <div id=\"map\" />\n        </AutoScale>\n      </div>\n    </div>\n  )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}