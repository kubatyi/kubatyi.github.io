{"version":3,"sources":["layouts/Circle/index.js","layouts/Default/index.js","layouts/WithoutText/index.js","layouts/Rectangle/index.js","layouts/CircleWhite/index.js","layouts/Square/index.js","App.js","serviceWorker.js","index.js"],"names":["Circle","headlineText","secondaryText","Fragment","className","id","Default","WithoutText","Rectangle","style","height","CircleWhite","width","marginLeft","marginRight","marginTop","styles","MAPBOX_TOKEN","layoutOptions","key","text","value","App","useState","cityInputValue","setCityInputValue","cityDropdownItems","setCityDropdownItems","setHeadlineText","setSecondaryText","layout","setLayout","map","setMap","center","setCenter","cityInputRef","useRef","useEffect","mapboxgl","container","zoom","window","location","hash","substr","attributionControl","on","state","getZoom","getCenter","dragRotate","disable","touchZoomRotate","disableRotation","parent","postMessage","JSON","stringify","current","searchRef","addEventListener","e","onCityInputChange","target","data","parse","setStyle","a","length","axios","get","params","access_token","autocomplete","response","cities","features","el","place_name","Dropdown","ref","placeholder","fluid","search","selection","options","onChange","selectedCityObject","find","flyTo","Input","label","disabled","maxScale","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7696b7be.chunk.js","sourcesContent":["import React from 'react';\nimport './index.scss';\n\nconst Circle = ({ headlineText, secondaryText }) => {\n  return (\n    <React.Fragment>\n      <div className=\"editor-wrapper circle\">\n        <div className=\"headline-text\">{headlineText}</div>\n        <div id=\"map\" />\n        <div className=\"secondary-text\">{secondaryText}</div>\n      </div>\n    </React.Fragment>\n  )\n};\n\nexport default Circle;\n","import React from 'react';\nimport './index.scss';\n\nconst Default = ({ headlineText, secondaryText }) => {\n  return (\n    <React.Fragment>\n      <div className=\"editor-wrapper gradient\">\n        <div id=\"map\" />\n        <div className=\"text-wrapper\">\n          <div className=\"headline-text\">{headlineText}</div>\n          <div className=\"secondary-text\">{secondaryText}</div>\n        </div>\n      </div>\n    </React.Fragment>\n  )\n};\n\nexport default Default;\n","import React from 'react';\nimport './index.scss';\n\nconst WithoutText = () => {\n  return (\n    <React.Fragment>\n      <div className=\"editor-wrapper without-text\">\n        <div id=\"map\" />\n      </div>\n    </React.Fragment>\n  )\n};\n\nexport default WithoutText;\n","import React from 'react';\nimport './index.scss';\n\nconst Rectangle = ({ headlineText, secondaryText }) => {\n  return (\n    <React.Fragment>\n      <div className=\"editor-wrapper rectangle\">\n        <div id=\"map\" style={{ height: '900px' }}/>\n        <div className=\"text-wrapper\">\n          <div className=\"headline-text\">{headlineText}</div>\n          <div className=\"secondary-text\">{secondaryText}</div>\n        </div>\n      </div>\n    </React.Fragment>\n  )\n};\n\nexport default Rectangle;\n","import React from 'react';\nimport './index.scss';\n\nconst CircleWhite = ({ headlineText, secondaryText }) => {\n  return (\n    <React.Fragment>\n      <div className=\"editor-wrapper circle-white\">\n        <div className=\"headline-text\">{headlineText}</div>\n        <div id=\"map\" />\n        <div className=\"secondary-text\">{secondaryText}</div>\n      </div>\n    </React.Fragment>\n  )\n};\n\nexport default CircleWhite;\n","import React from 'react';\nimport './index.scss';\n\nconst Rectangle = ({ headlineText, secondaryText }) => {\n  return (\n    <React.Fragment>\n      <div className=\"editor-wrapper square\">\n        <div id=\"map\" style={{ width: '750px', height: '750px', marginLeft: 'auto', marginRight: 'auto', marginTop: '43px' }}/>\n        <div className=\"text-wrapper\">\n          <div className=\"headline-text\">{headlineText}</div>\n          <div className=\"secondary-text\">{secondaryText}</div>\n        </div>\n      </div>\n    </React.Fragment>\n  )\n};\n\nexport default Rectangle;\n","import React, { useState, useEffect, useRef } from 'react';\nimport './App.scss';\nimport * as mapboxgl from 'mapbox-gl';\nimport AutoScale from 'react-auto-scale';\nimport axios from 'axios';\nimport { Dropdown, Input } from 'semantic-ui-react'\nimport Circle from \"./layouts/Circle/index\";\nimport 'semantic-ui-css/semantic.min.css'\nimport Default from \"./layouts/Default\";\nimport WithoutText from \"./layouts/WithoutText/index\";\nimport Rectangle from \"./layouts/Rectangle\";\nimport CircleWhite from \"./layouts/CircleWhite\";\nimport Square from \"./layouts/Square\";\n\nconst styles = {\n  'blue': 'mapbox://styles/kubatyi/ckdn1lgk80nbp1il7tbjdqnxm',\n  'red': 'mapbox://styles/kubatyi/ckdo7qi431s7n1io4ya13jmvq',\n  'green': 'mapbox://styles/kubatyi/ckdogvd6721wt1ioii4wlls2a',\n  'simple': 'mapbox://styles/kubatyi/ckdoglnu937ix1it80v32fsno'\n};\n\nconst MAPBOX_TOKEN = 'pk.eyJ1Ijoia3ViYXR5aSIsImEiOiJjazA2cmtleDEwMTc5M2NwZ3N3Z2plcGdnIn0.Nio3ZaFI2366HS56tW28wQ';\n\nconst layoutOptions = [\n  {\n    key: '1',\n    text: 'Gradient',\n    value: 'gradient'\n  },\n  {\n    key: '2',\n    text: 'Without Text',\n    value: 'without_text'\n  },\n  {\n    key: '3',\n    text: 'Circle',\n    value: 'circle'\n  },\n  {\n    key: '4',\n    text: 'Circle (Light)',\n    value: 'circle-white'\n  },\n  {\n    key: '5',\n    text: 'Rectangle',\n    value: 'rectangle'\n  },\n  {\n    key: '6',\n    text: 'Square',\n    value: 'square'\n  }\n];\n\nconst App = () => {\n  const [cityInputValue, setCityInputValue] = useState('New York');\n  const [cityDropdownItems, setCityDropdownItems] = useState([]);\n  const [headlineText, setHeadlineText] = useState('New York');\n  const [secondaryText, setSecondaryText] = useState('United States');\n  const [layout, setLayout] = useState('gradient');\n  const [map, setMap] = useState(null);\n  const [center, setCenter] = useState([-73.9808, 40.7648]);\n  const cityInputRef = useRef();\n\n  useEffect(() => {\n    mapboxgl.accessToken = MAPBOX_TOKEN;\n\n    setMap(new mapboxgl.Map({\n      container: 'map',\n      center: center,\n      zoom: 11,\n      style: styles[window.location.hash.substr(1)],\n      attributionControl: false\n    }));\n\n  }, [layout]);\n\n  useEffect(() => {\n    if (map) {\n      const handleStateChange = () => {\n        const state = {\n          zoom: map.getZoom(),\n          center: map.getCenter(),\n        };\n\n        map.dragRotate.disable();\n\n        map.touchZoomRotate.disableRotation();\n\n        window.parent.postMessage(JSON.stringify(state), '*');\n      };\n\n      map.on('touchend', handleStateChange);\n\n      if (cityInputRef.current) {\n        cityInputRef.current.searchRef.current.addEventListener('keyup', (e) => {\n          onCityInputChange(e.target.value)\n        })\n      }\n\n      window.addEventListener('message', (e) => {\n        const data = JSON.parse(e.data);\n\n        if (data.style) {\n          if (map) {\n            map.setStyle(styles[data.style]);\n            window.location.hash = `#${data.style}`\n          }\n        }\n      });\n    }\n  }, [map]);\n\n  const onCityInputChange = async value => {\n    setCityInputValue(value);\n\n    if (value.length) {\n      const response = await axios.get(`https://api.mapbox.com/geocoding/v5/mapbox.places/${value}.json`, {\n        params: {\n          access_token: MAPBOX_TOKEN,\n          autocomplete: true,\n        }\n      });\n\n      const cities = response.data.features.map(el => {\n        return {\n          key: el.id,\n          value: el.place_name,\n          text: el.place_name,\n          center: el.center\n        }\n      });\n\n      setCityDropdownItems(cities);\n    }\n  };\n\n  return (\n    <div id=\"map-editor\">\n      <div className=\"inputs-wrapper\">\n        <Dropdown\n          className=\"city-dropdown\"\n          ref={cityInputRef}\n          placeholder='Search City'\n          fluid\n          search\n          selection\n          value={cityInputValue}\n          options={cityDropdownItems}\n          onChange={(e, data) => {\n            const selectedCityObject = cityDropdownItems.find(el => el.value === data.value);\n            map.flyTo({\n              center: selectedCityObject.center,\n              zoom: 12\n            });\n            setCenter(selectedCityObject.center);\n            setCityInputValue(data.value);\n          }}\n        />\n        <Dropdown\n          className=\"city-dropdown\"\n          placeholder='Select Layout'\n          fluid\n          search\n          selection\n          options={layoutOptions}\n          onChange={(e, data) => setLayout(data.value)}\n        />\n        <Input fluid label=\"Headline Text\" disabled={layout === 'without_text'} value={headlineText} onChange={e => setHeadlineText(e.target.value)} />\n        <Input fluid label=\"Secondary Text\" disabled={layout === 'without_text'} value={secondaryText} onChange={e => setSecondaryText(e.target.value)} />\n      </div>\n\n      <AutoScale maxScale={1}>\n        <React.Fragment>\n          {layout === 'gradient' && <Default headlineText={headlineText} secondaryText={secondaryText} />}\n          {layout === 'circle' && <Circle headlineText={headlineText} secondaryText={secondaryText} />}\n          {layout === 'circle-white' && <CircleWhite headlineText={headlineText} secondaryText={secondaryText} />}\n          {layout === 'without_text' && <WithoutText />}\n          {layout === 'rectangle' && <Rectangle headlineText={headlineText} secondaryText={secondaryText}/>}\n          {layout === 'square' && <Square headlineText={headlineText} secondaryText={secondaryText}/>}\n        </React.Fragment>\n      </AutoScale>\n    </div>\n  )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}